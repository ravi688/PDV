@page "/"
@rendermode InteractiveServer

<PageTitle>PDV Web Client</PageTitle>

<h1>PDV Web Client</h1>

<p>Code Repository for PDV is hosted on <a href="https://github.com/ravi688/PDV">Github</a></p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Entries</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>
                    <p @onclick="() => OnEntryClick(forecast)">@String.Format("[{0}] {1}", forecast.Index, forecast.Title)</p>
                    @if(forecast.IsVisible)
                    {
                        <p> @forecast.Filename </p>
                        <p> @forecast.Description </p>
                        <button class="btn btn-primary" @onclick="IncrementCount">Go To Source</button>
                        <button class="btn btn-primary" @onclick="IncrementCount">Go To Results</button>
                    }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private int currentCount = 0;

    private void IncrementCount()
    {
        currentCount++;
        Console.WriteLine("IncrementCount has been called");
    }
}

@code {
    private List<EntryData> forecasts = new List<EntryData>();

    private void OnEntryClick(EntryData forecast)
    {
        Console.WriteLine("Button Has been Clicked");
        forecast.IsVisible = !forecast.IsVisible;
    }

    protected override void OnInitialized()
    {
        string connectionString = "Server=192.168.1.18;Database=db_pdv;Uid=pdvwebclient;Pwd=Welcome@123;";
        using(MySqlConnection connection = new MySqlConnection(connectionString))
        {
            connection.Open();
            Console.WriteLine("Connected to MySQL!");
            string query = "SELECT * FROM db_pdv.main_table";
            using(MySqlCommand command = new MySqlCommand(query, connection))
            {
                using(MySqlDataReader reader = command.ExecuteReader())
                {
                    while(reader.Read())
                    {
                        EntryData data = new EntryData();
                        data.Index = (int)reader["id"];
                        data.Title = reader["title"].ToString();
                        data.Filename = reader["filename"].ToString();
                        data.Description = reader["description"].ToString();
                        data.Source = reader["source"].ToString();
                        data.Result = reader["result"].ToString();
                        data.IsVisible = false;
                        forecasts.Add(data);
                    }
                }
            }
        }
    }

    private class EntryData
    {
        public int Index { get; set; }
        public string? Title { get; set; }
        public string? Filename { get; set; }
        public string? Description { get; set; }
        public string? Source { get; set; }
        public string? Result { get; set; }
        public bool IsVisible { get; set; }
    }
}
